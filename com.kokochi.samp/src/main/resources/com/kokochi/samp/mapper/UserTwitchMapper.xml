<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kokochi.samp.mapper.UserTwitchMapper">

    <!-- 특정 사용자 가져오기 -->
    <select id="read" resultType="UserTwitchVO" parameterType="UserTwitchVO">
        SELECT id, login, display_name, type, broadcaster_type, description, offline_image_url, profile_image_url, view_count, created_at
        FROM user_twitch
        <where>
            <if test="id    !=null">AND id = #{id}</if>
            <if test="login !=null">AND login = #{login}</if>
        </where>
    </select>

    <!-- 사용자의 팔로우 목록 가져오기 -->
    <select id="readFollowList" resultType="UserTwitchVO" parameterType="String">
        SELECT ut.id ID, ut.login LOGIN, ut.display_name display_name, ut.type type, ut.broadcaster_type broadcaster_type,
               ut.description description , ut.offline_image_url offline_image_url, ut.profile_image_url profile_image_url,
               ut.view_count view_count, ut.created_at created_at, mf.id managed_id, (mf.id is not null) isManaged
        FROM user_follow uf
                 left join user_twitch ut on ut.id = uf.to_id
                 left join user u on u.twitch_user_id = uf.from_id
                 left join managed_follow mf on u.id = mf.user_id and ut.id = mf.to_user
        WHERE uf.from_id = #{from_id}
        ORDER BY isManaged DESC
    </select>

    <!-- 사용자 생성 -->
    <insert id="create" parameterType="UserTwitchVO">
        INSERT INTO user_twitch(id, login, display_name, type, broadcaster_type, description, offline_image_url, profile_image_url, view_count, created_at)
        VALUES(#{id}, #{login}, #{display_name}, #{type}, #{broadcaster_type}, #{description}, #{offline_image_url}, #{profile_image_url}, #{view_count}, #{created_at})
    </insert>

    <insert id="createList" parameterType="UserTwitchVO">
        INSERT INTO user_twitch(id, login, display_name, type, broadcaster_type, description, offline_image_url, profile_image_url, view_count, created_at)
        VALUES
        <foreach collection="list" item="ut" index="index" separator=",">
            (#{ut.id}
            , #{ut.login}
            , #{ut.display_name}
            , #{ut.type}
            , #{ut.broadcaster_type}
            , #{ut.description}
            , #{ut.offline_image_url}
            , #{ut.profile_image_url}
            , #{ut.view_count}
            , #{ut.created_at})
        </foreach>
    </insert>

    <!-- 사용자 제거 Id -->
    <delete id="deleteById" parameterType="String">
        DELETE FROM user_twitch
        WHERE id = #{id}
    </delete>

    <!-- 사용자 제거 Login -->
    <delete id="deleteByLogin">
        DELETE FROM user_twitch
        WHERE login = #{login}
    </delete>

    <!-- 사용자 정보 수정 -->
    <update id="update" parameterType="UserTwitchVO">
        UPDATE user
        <trim prefix="set" prefixOverrides=",">
            <if test="display_name		!=null">, display_name = #{display_name}</if>
            <if test="type		        !=null">, type = #{type}</if>
            <if test="broadcaster_type	!=null">, broadcaster_type = #{broadcaster_type}</if>
            <if test="description	    !=null">, description = #{description}</if>
            <if test="offline_image_url	!=null">, offline_image_url = #{offline_image_url}</if>
            <if test="profile_image_url !=null">, profile_image_url = #{profile_image_url}</if>
            <if test="view_count     	!=null">, view_count = #{view_count}</if>
            <if test="created_at     	!=null">, created_at = #{created_at}</if>
        </trim>
        WHERE 1 = 1
        <if test="id				!=null">AND id = #{id}</if>
        <if test="login			    !=null">AND login = #{login}</if>
    </update>

</mapper>